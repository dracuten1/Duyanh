{"version":3,"sources":["components/NavigationBar.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","tabindex","aria-disabled","placeholder","React","Component","App","axios","get","then","res","json","j","console","log","role","class","includeUI","loadImage","path","name","theme","menu","initMenu","uiSize","width","height","menuBarPosition","cssMaxHeight","cssMaxWidth","selectionStyle","cornerSize","rotatingPointOffset","usageStatistics","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2WAmCeA,E,uKA/BP,OACI,gCACA,yBAAKC,UAAU,+CACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,YACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,kBAAkBC,gBAAc,iBAAiBC,gBAAc,QAAQC,aAAW,qBACpK,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,kBAC3C,wBAAIR,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAExC,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,aAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,oBAAoBC,KAAK,IAAIQ,SAAS,KAAKC,gBAAc,QAAtE,cAGJ,0BAAMV,UAAU,4BACd,2BAAOA,UAAU,uBAAuBE,KAAK,OAAOS,YAAY,WAAWJ,aAAW,aACtF,2BAAOP,UAAU,uBAAuBE,KAAK,WAAWS,YAAY,WAAWJ,aAAW,aAC1F,4BAAQP,UAAU,uCAAuCE,KAAK,UAA9D,iB,GAxBUU,IAAMC,W,iBCkDnBC,E,kLAzCXC,IAAMC,IAAI,gFACTC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,QACdF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,Q,+BAId,OACE,oCACE,kBAAC,EAAD,MACA,0BAAMG,KAAK,OAAOC,MAAM,iBACtB,yBAAKxB,UAAU,aACb,kBAAC,IAAD,CACEyB,UAAW,CACTC,UAAW,CACTC,KAAM,GACNC,KAAM,IAERC,MAAO,GACPC,KAAM,CAAC,QAAS,SAAU,QAC1BC,SAAU,SACVC,OAAQ,CACNC,MAAO,OACPC,OAAQ,SAEVC,gBAAiB,QAEnBC,aAAc,IACdC,YAAa,IACbC,eAAgB,CACdC,WAAY,GACZC,oBAAqB,IAEvBC,iBAAiB,W,GAnCb5B,aCGE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.f7101120.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass NavigationBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n              <a className=\"navbar-brand\" href=\"#\">YOURCARD</a>\r\n              <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                  <li className=\"nav-item active\">\r\n                    <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">Template</a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a className=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n                  </li>\r\n                </ul>\r\n                <form className=\"form-inline mt-2 mt-md-0\">\r\n                  <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"username\" aria-label=\"username\"/>\r\n                  <input className=\"form-control mr-sm-2\" type=\"password\" placeholder=\"password\" aria-label=\"password\"/>\r\n                  <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Login</button>\r\n                </form>\r\n              </div>\r\n            </nav>\r\n          </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react';\nimport './App.css';\nimport 'tui-image-editor/dist/tui-image-editor.css';\nimport ImageEditor from '@toast-ui/react-image-editor'\nimport NavigationBar from './components/NavigationBar';\nimport axios from 'axios';\n\n\n\nclass App extends Component{\n  componentDidMount(){\n    axios.get('https://openapi.etsy.com/v2/listings/active?api_key=wkuyejv8udvnpl4nfgm5tva3')\n    .then(res=>res.json)\n    .then(j=>{\n      console.log(j);\n    });\n  }\n  render() {\n    return (\n      <>\n        <NavigationBar></NavigationBar>\n        <main role=\"main\" class=\"flex-shrink-0\">\n          <div className='container'>\n            <ImageEditor\n              includeUI={{\n                loadImage: {\n                  path: '',\n                  name: ''\n                },\n                theme: {},\n                menu: ['shape', 'filter', 'text'],\n                initMenu: 'filter',\n                uiSize: {\n                  width: 'auto',\n                  height: '700px'\n                },\n                menuBarPosition: 'left'\n              }}\n              cssMaxHeight={500}\n              cssMaxWidth={700}\n              selectionStyle={{\n                cornerSize: 20,\n                rotatingPointOffset: 70\n              }}\n              usageStatistics={true}\n            />\n          </div>\n        </main>\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import'bootstrap/dist/css/bootstrap.min.css';\nimport $ from'jquery';\nimport Popper from'popper.js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}